#include "serial_audio_lib.h"

#include <stdlib.h>
#include <stdio.h>
#include "xparameters.h"
#include "xuartlite_l.h"
#include "dds_phase_accum.h"


#define MAX_AUDIO_FILE_SAMPLES 4096

static uint32_t dds_inc_word;


#define NUM_SIN_STEPS 9
void sin_audio_test(void) {
	set_dds_accum(100);
}


void print_main_menu(void) {
	xil_printf("\r\n\tWelcome to the DDS Synthesizer!\r\n");
	xil_printf("\t===== Main Menu =====\r\n");
	xil_printf("\tu - step frequency up 100Hz\r\n");
	xil_printf("\tU - step frequency up 1000Hz\r\n");
	xil_printf("\td - step frequency down 100Hz\r\n");
	xil_printf("\tD - step frequency down 1000Hz\r\n");
	xil_printf("\r\nPress a key to continue...\r\n");
}


/*
 * Waits for entered option,
 * Sanitizes Entered option,
 * returns option
 */
User_Option get_option(void) {
	User_Option choice = UNKNOWN;
	char input_c =  getchar();
	switch (input_c) {
		case 'u':
			choice = inc_freq(100); break;
		case 'U':
			choice = inc_freq(1000); break;
		case 'd':
			choice = dec_freq(100); break;
		case 'D':
			choice = dec_freq(1000); break;
		default:
			xil_printf("[get_option] Unhandled character received: 0x%02x\r\n", input_c);
	}
	return choice;
}

static uint32_t bytes4_to_32bits (uint8_t *bytes) {
	uint32_t ret = 0;
	ret |= (bytes[3] << 24) & 0xFF000000;
	ret |= (bytes[2] << 16) & 0x00FF0000;
	ret |= (bytes[1] << 8)  & 0x0000FF00;
	ret |= (bytes[0]) 		& 0x000000FF;
	return ret;
}

